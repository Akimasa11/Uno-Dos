### Starting build.
# Target: test.ml.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:ml, file:test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules test.ml > test.ml.depends
# Target: command.mli.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules command.mli > command.mli.depends # cached
# Target: command.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o command.cmi command.mli # cached
# Target: deck.mli.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:mli, file:deck.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules deck.mli > deck.mli.depends # cached
# Target: deck.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:mli, file:deck.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o deck.cmi deck.mli # cached
# Target: dos.mli.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:mli, file:dos.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules dos.mli > dos.mli.depends # cached
# Target: dos.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:mli, file:dos.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o dos.cmi dos.mli # cached
# Target: person.mli.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:mli, file:person.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules person.mli > person.mli.depends # cached
# Target: person.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:mli, file:person.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o person.cmi person.mli # cached
# Target: state.mli.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules state.mli > state.mli.depends # cached
# Target: state.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o state.cmi state.mli # cached
# Target: uno.mli.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:mli, file:uno.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules uno.mli > uno.mli.depends # cached
# Target: uno.cmi, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:mli, file:uno.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o uno.cmi uno.mli # cached
# Target: test.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o test.cmo test.ml
# Target: command.ml.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules command.ml > command.ml.depends # cached
# Target: command.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o command.cmo command.ml # cached
# Target: deck.ml.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:ml, file:deck.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules deck.ml > deck.ml.depends # cached
# Target: deck.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:deck.cmo, file:deck.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o deck.cmo deck.ml # cached
# Target: dos.ml.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:ml, file:dos.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules dos.ml > dos.ml.depends # cached
# Target: dos.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:dos.cmo, file:dos.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o dos.cmo dos.ml # cached
# Target: person.ml.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:ml, file:person.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules person.ml > person.ml.depends # cached
# Target: person.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:person.cmo, file:person.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o person.cmo person.ml # cached
# Target: state.ml.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules state.ml > state.ml.depends # cached
# Target: state.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o state.cmo state.ml # cached
# Target: uno.ml.depends, tags: { package(ANSITerminal), package(ounit2), debug, extension:ml, file:uno.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -modules uno.ml > uno.ml.depends # cached
# Target: uno.cmo, tags: { package(ANSITerminal), package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:uno.cmo, file:uno.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -o uno.cmo uno.ml # cached
# Target: test.byte, tags: { package(ANSITerminal), package(ounit2), byte, debug, dont_link_with, extension:byte, file:test.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -g -package ounit2 -package ANSITerminal command.cmo deck.cmo dos.cmo person.cmo state.cmo uno.cmo test.cmo -o test.byte
# Compilation successful.
